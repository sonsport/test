// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"database/sql"

	"fuya-ark/internal/dao/internal"
	"fuya-ark/internal/model/entity"
)

// internalInviterInfoDao is internal type for wrapping internal DAO implements.
type internalInviterInfoDao = *internal.InviterInfoDao

// inviterInfoDao is the data access object for table inviter_info.
// You can define custom methods on it to extend its functionality as you wish.
type inviterInfoDao struct {
	internalInviterInfoDao
}

var (
	// InviterInfo is globally public accessible object for table inviter_info operations.
	InviterInfo = inviterInfoDao{
		internal.NewInviterInfoDao(),
	}
)

// Fill with you ideas below.

func (m *inviterInfoDao) GetInviterInfo(ctx context.Context, inviterId int64) (*entity.InviterInfo, error) {
	var res *entity.InviterInfo
	err := m.DB().Model().Ctx(ctx).
		Where("user_id", inviterId).
		Scan(&res)
	if err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return res, nil
}

func (m *inviterInfoDao) SaveInviterInfo(ctx context.Context) (int64, error) {
	res, err := m.DB().Model().Ctx(ctx).Data(m).InsertAndGetId()
	if err != nil && err != sql.ErrNoRows {
		return 0, err
	}
	return res, nil
}

func (m *inviterInfoDao) SetCount(ctx context.Context, id uint) interface{} {
	if _, err := m.DB().Model().Ctx(ctx).
		Where("id", id).
		Increment("invite_user_count", 1); err != nil {
		return err
	}
	return nil
}
